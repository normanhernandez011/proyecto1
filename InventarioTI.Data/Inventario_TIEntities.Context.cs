//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventarioTI.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Inventario_TIEntities : DbContext
    {
        public Inventario_TIEntities()
            : base("name=Inventario_TIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bodegas> Bodegas { get; set; }
        public virtual DbSet<Empleados> Empleados { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<Marcas> Marcas { get; set; }
        public virtual DbSet<Movimientos> Movimientos { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<TiposMovimientos> TiposMovimientos { get; set; }
        public virtual DbSet<TiposProducto> TiposProducto { get; set; }
        public virtual DbSet<Ubicacion> Ubicacion { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual int spInsertarBodegas(string bodegaDescripcion, Nullable<decimal> ubicacionID)
        {
            var bodegaDescripcionParameter = bodegaDescripcion != null ?
                new ObjectParameter("BodegaDescripcion", bodegaDescripcion) :
                new ObjectParameter("BodegaDescripcion", typeof(string));
    
            var ubicacionIDParameter = ubicacionID.HasValue ?
                new ObjectParameter("UbicacionID", ubicacionID) :
                new ObjectParameter("UbicacionID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarBodegas", bodegaDescripcionParameter, ubicacionIDParameter);
        }
    
        public virtual int spInsertarEmpleados(string nombre, string apellido, Nullable<System.DateTime> fecha_Nacimiento)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarEmpleados", nombreParameter, apellidoParameter, fecha_NacimientoParameter);
        }
    
        public virtual int spInsertarInventario(Nullable<decimal> productoID, Nullable<decimal> movimientoID, Nullable<int> cantidad)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(decimal));
    
            var movimientoIDParameter = movimientoID.HasValue ?
                new ObjectParameter("MovimientoID", movimientoID) :
                new ObjectParameter("MovimientoID", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarInventario", productoIDParameter, movimientoIDParameter, cantidadParameter);
        }
    
        public virtual int spInsertarMarca(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarMarca", descripcionParameter);
        }
    
        public virtual int spInsertarMovimiento(Nullable<decimal> tipoMovimientoID, Nullable<decimal> bodegaID, Nullable<decimal> ubicacionID, Nullable<decimal> empleadoID, Nullable<int> cantidad, Nullable<decimal> productoID)
        {
            var tipoMovimientoIDParameter = tipoMovimientoID.HasValue ?
                new ObjectParameter("TipoMovimientoID", tipoMovimientoID) :
                new ObjectParameter("TipoMovimientoID", typeof(decimal));
    
            var bodegaIDParameter = bodegaID.HasValue ?
                new ObjectParameter("BodegaID", bodegaID) :
                new ObjectParameter("BodegaID", typeof(decimal));
    
            var ubicacionIDParameter = ubicacionID.HasValue ?
                new ObjectParameter("UbicacionID", ubicacionID) :
                new ObjectParameter("UbicacionID", typeof(decimal));
    
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarMovimiento", tipoMovimientoIDParameter, bodegaIDParameter, ubicacionIDParameter, empleadoIDParameter, cantidadParameter, productoIDParameter);
        }
    
        public virtual int spInsertarProductos(string nombreProducto, Nullable<decimal> tipoProductoID, Nullable<decimal> marcaID)
        {
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var tipoProductoIDParameter = tipoProductoID.HasValue ?
                new ObjectParameter("TipoProductoID", tipoProductoID) :
                new ObjectParameter("TipoProductoID", typeof(decimal));
    
            var marcaIDParameter = marcaID.HasValue ?
                new ObjectParameter("MarcaID", marcaID) :
                new ObjectParameter("MarcaID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarProductos", nombreProductoParameter, tipoProductoIDParameter, marcaIDParameter);
        }
    
        public virtual int spInsertarTiposMovimientos(string tipoMovimiento)
        {
            var tipoMovimientoParameter = tipoMovimiento != null ?
                new ObjectParameter("TipoMovimiento", tipoMovimiento) :
                new ObjectParameter("TipoMovimiento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarTiposMovimientos", tipoMovimientoParameter);
        }
    
        public virtual int spInsertarTiposProductos(string tipoProductos)
        {
            var tipoProductosParameter = tipoProductos != null ?
                new ObjectParameter("TipoProductos", tipoProductos) :
                new ObjectParameter("TipoProductos", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarTiposProductos", tipoProductosParameter);
        }
    
        public virtual int spInsertarUbicacion(string ubicacion)
        {
            var ubicacionParameter = ubicacion != null ?
                new ObjectParameter("Ubicacion", ubicacion) :
                new ObjectParameter("Ubicacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarUbicacion", ubicacionParameter);
        }
    
        public virtual int spInsertarUsuario(string usuario, string clave)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarUsuario", usuarioParameter, claveParameter);
        }
    }
}
